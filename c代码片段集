1.统计单词数目，水平柱状图显示
#include <stdio.h>
#define MAXWORDLEN 10
int main(void)
{
	int c;
	int inspace = 0;
	long lengtharr[MAXWORDLEN + 1];
	int wordlen = 0;
	int firstletter = 1;
	long thisval = 0;
	long maxval = 0;
	int thisidx = 0;
	int done = 0;

	for(thisidx = 0; thisidx <= MAXWORDLEN; thisidx++)
	{
		lengtharr[thisidx] = 0;
	}
	while(done == 0)
	{
		c = getchar();
		if(c == ' ' || c == '\t' || c == '\n' || c == EOF)
		{
			if(inspace == 0)
			{
				firstletter = 0;
				inspace = 1;
				
				if (wordlen <= MAXWORDLEN)
				{
					if(wordlen > 0)
					{
						thisval = ++lengtharr[wordlen -1];
						printf("thisval is %d\n",thisval);
						printf("[wordlen - 1] is %d\n",wordlen -1);
						if(thisval > maxval)
						{
							maxval = thisval;
							printf("maxval  is %d\n",thisval);
						}
					}
				}
				else
				{
					thisval = ++lengtharr[MAXWORDLEN];
					if(thisval > maxval)
					{
						maxval = thisval;
					}
				}
			}
			if(c == EOF)
			{
				done = 1;
				printf("done is %d\n",done);
			}
		}
		else
		{
			if(inspace == 1 || firstletter == 1)
			{
				wordlen = 0;
				firstletter = 0;
				inspace = 0;
			}
			++wordlen;
			printf("%d\n", wordlen);
		}
	}
	for(thisval = maxval;thisval > 0;thisval--)
	{
		printf("%4d | ", thisval);
		for(thisidx = 0;thisidx <= MAXWORDLEN;thisidx++)
		{
			if(lengtharr[thisidx] >= thisval)
			{
				printf("*  ");
			}
			else
			{
				printf("   ");
			}
		}
		printf("\n");
	}
	printf("     +");
	for(thisidx = 0; thisidx <= MAXWORDLEN;thisidx++)
	{
		printf("---");
	}
	printf("\n      ");
	for(thisidx=0;thisidx<MAXWORDLEN;thisidx++)
	{
		printf("%2d ", thisidx + 1);
	}
	printf(">%d\n", MAXWORDLEN);

	return 0;
}

2.统计字符出现的频率
[clang@clientlinux ctest]$ cat histoffreq.c 
#include<stdio.h>
#include<ctype.h>
#define MAXHIST 15
#define MAXCHAR 128
main()
{
	int c, i;
	int len;
	int maxvalue;
	int cc[MAXCHAR];
	for(i=0;i<MAXCHAR;++i)
		cc[i] = 0;
	while ((c=getchar())!=EOF)
		if(c<MAXCHAR)
			++cc[c];
	maxvalue=0;
	for(i=1;i<MAXCHAR;++i)
		if(cc[i]>maxvalue)
			maxvalue = cc[i];
	for(i=1;i<MAXCHAR;++i)
	{
		if(isprint(i))
			printf("%5d - %c - %5d : ",i,i,cc[i]);
		else
			printf("%5d -   - %5d : ",i,cc[i]);
		if(cc[i]>0)
		{
			if((len = cc[i] * MAXHIST /maxvalue) <= 0)
				len = 1;
		}
		else
			len = 0;
		while (len > 0)
		{
			putchar('*');
			--len;
		}
		putchar('\n');
	}
}

3.找出一个文件中最长的行，使用了自定义的getlin()和copy()函数
[clang@clientlinux ctest]$ cat getcopy.c 
#include<stdio.h>
#define MAXLINE 1000
int getlin(char line[], int maxline);
void copy(char to[], char from[]);
main()
{
	int len;
	int max;
	char line[MAXLINE];
	char longest[MAXLINE];

	max=0;
	while((len=getlin(line, MAXLINE))>0)
		if(len>max)
		{
			max=len;
			copy(longest, line);
		}
	if (max > 0)
		printf("%s", longest);
	return 0;
}
int getlin(char s[], int lim)
{
	int c,i;

	for (i=0;i<lim -1 && (c=getchar())!=EOF && c!='\n';++i)
		s[i]=c;
	if(c=='\n')
	{
		s[i]=c;
		++i;
	}
	s[i]='\0';
	return i;
}
void copy(char to[], char from[])
{
	int i;

	i=0;
	while ((to[i]=from[i])!='\0')
		++i;
}

4.删除每个输入行末尾的空格及制表符，并删除完全是空格的行。
#include<stdio.h>
#define MAXLINE 1000
int getliner(char line[], int maxline);
int remover(char s[]);
main()
{
	char line[MAXLINE];
	while(getliner(line, MAXLINE) > 0)
		if(remover(line) > 0)
			printf("%s",line);
	return 0;
}
int remover(char s[])
{
	int i;
	i=0;
	while(s[i] != '\n')
		++i;
	--i;
	while(i>=0 && (s[i] == ' ' || s[i] == '\t'))
		--i;
	if(i >= 0)
	{
		++i;
		s[i] = '\n';
		++i;
		s[i] = '\0';
	}
	return i;
}
int getliner(char s[], int lim)
{
	int c,i,j;
	j=0;
	for(i=0;(c=getchar())!=EOF && c!='\n';++i)
		if(i<lim-2)
		{
			s[j]=c;
			++j;
		}
	if(c=='\n')
	{
		s[j]=c;
		++j;
		++i;
	}
	s[j]='\0';
	return i;
}
第二种方法：
#include<stdio.h>
#define MAXLINE 1000
int getliner(char line[], int maxline);
int remover(char s[]);
main()
{
	char line[MAXLINE];
	while(getliner(line, MAXLINE) > 0)
		if(remover(line) > 0)
			printf("%s",line);
	return 0;
}
int remover(char s[])
{
	int i;
	i=0;
	while(s[i] != '\n')
		++i;
	--i;
	while(i>=0 && (s[i] == ' ' || s[i] == '\t'))
		--i;
	if(i >= 0)
	{
		++i;
		s[i] = '\n';
		++i;
		s[i] = '\0';
	}
	return i;
}
int getliner(char s[], int lim)
{
	int c,i,j;
	j=0;
	for(i=0;(c=getchar())!=EOF && c!='\n';++i)
		if(i<lim-2)
		{
			s[j]=c;
			++j;
		}
	if(c=='\n')
	{
		s[j]=c;
		++j;
		++i;
	}
	s[j]='\0';
	return i;
}

5.实现对一个文件的每一行的反转
#include<stdio.h>
#define MAXLINE 1000

int getliner(char line[], int maxline); /*getliner函数和之前定义过的是同一个*/
void reverse(char s[]);

main()
{
	char line[MAXLINE];

	while(getliner(line, MAXLINE) > 0)
	{
		reverse(line);
		printf("%s", line);
	}
}

void reverse(char s[])
{
	int i,j;
	char temp;

	i=0;
	while(s[i] != '\0')
		++i;
	--i;
	if(s[i]=='\n')
		--i;
	j=0;
	while(j<i)
	{
		temp=s[j];
		s[j]=s[i];
		s[i]=temp;
		--i;
		++j;
	}
}

6.将空格串替换为最少数量的制表符和空格
#include<stdio.h>
#define TABINC 8
main()
{
	int c,nb,nt,pos;
	nb=0;
	nt=0;
	for(pos=1;(c=getchar())!=EOF;++pos)
	{	if(c == ' ')
		{
			if(pos%TABINC != 0)
			{	
				++nb;
			}
			else
			{
				nb=0;
				++nt;
			}
		}
		else
		{
			for(;nt>0;--nt)
				putchar('\t');
			if(c=='\t')
				nb=0;
			else
				for(;nb>0;--nb)
					putchar(' ');
			putchar(c);
			if(c=='\n')
				pos=0;
			else if(c=='\t')
				pos=pos+(TABINC - (pos-1)%TABINC)-1;
		}
	}
}
